using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.IO.Pipes;
using System.IO;

namespace Roblox_Exploit_API
{
    class API
    {
        [DllImport("kernel32.dll")]
        private static extern IntPtr OpenProcess(int dwDesiredAccess, bool bInheritHandle, int dwProcessId);

        [DllImport("kernel32.dll")]
        private static extern IntPtr GetModuleHandle(string lpModuleName);

        [DllImport("kernel32.dll")]
        private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

        [DllImport("kernel32.dll")]
        private static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        private static extern int WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, int lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        private static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        private static extern bool WaitNamedPipe(string lpNamedPipeName, int nTimeOut);

        static private bool PipeExists()
        {
            if (!WaitNamedPipe("\\\\.\\pipe\\" + PipeName, 0))
                return false;

            return true;
        }

        static public void SendLua(string script)
        {
            if (PipeExists())
            {
                using (NamedPipeClientStream PipeStream = new NamedPipeClientStream(".", PipeName, PipeDirection.Out))
                {
                    PipeStream.Connect();
                    using (StreamWriter Writer = new StreamWriter(PipeStream, Encoding.Default, 1000000))
                        Writer.WriteAsync(script);
                }
            }
        }

        static public bool Inject(string dll_path)
        {
            if (!PipeExists())
                return false;

            var pid = Process.GetProcessesByName("RobloxPlayerBeta")[0].Id;

            var loadlibraryA = GetProcAddress(GetModuleHandle("kernel32.dll"), "LoadLibraryA");

            var process_handle = OpenProcess(0xFFFF, false, pid);
            var memory = VirtualAllocEx(process_handle, IntPtr.Zero, (uint)(dll_path.Length + 1), 0x00001000 | 0x00002000, 4);

            WriteProcessMemory(process_handle, memory, Encoding.Default.GetBytes(dll_path), (uint)(dll_path.Length + 1), 0);
            CreateRemoteThread(process_handle, IntPtr.Zero, 0, loadlibraryA, memory, 0, IntPtr.Zero);

            return true;
        }

        // Configuration
        public static string PipeName = "PIPE_NAME";
    }
}